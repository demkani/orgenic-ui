// =============================================================================
// CSS CUSTOM PROPERTIES
// =============================================================================

/**
 * @prop --item-Color: Text color of the list item
 * @prop --item-Background: Background of the list item (shorthand)
 * @prop --item-Background--active: Background of the list item when selected (shorthand)
 * @prop --item-Background--highlight: Background of the list item when hovered (shorthand)
 * @prop --item-Opacity: Opacity of the list item;
 * @prop --item-Opacity--disabled: Opacity of the list item;
 * @prop --item-BorderColor: Border color of the list item
 * @prop --item-BorderRadius: Border radius of the list item
 * @prop --item-BorderStyle: Border style of the list item
 * @prop --item-BorderWidth: Border width of the list item
 * @prop --item-Margin: Margin of the list item
 * @prop --item-MinHeight: Minimum height of the list item
 */

:host {
    --item-Color:                  var(--og-list-item-Color, #{$og-color-shade--100});

    --item-Background:             var(--og-list-item-Background, #{$og-color-primary--0--30});
    --item-Background--highlight:  var(--og-list-item-Background--highlight, #{$og-color-primary--100--15});
    --item-Background--active:     var(--og-list-item-Background--active, #{$og-color-primary--100--30});
    
    --item-BorderWidth:             var(--og-list-item-BorderWidth, 2px);
    --item-BorderStyle:             var(--og-list-item-BorderStyle, solid);
    --item-BorderColor:             var(--og-list-item-BorderColor, transparent);
    --item-BorderRadius:            var(--og-list-item-BorderRadius, 0);
    
    --item-Margin:                  var(--og-list-item-Margin, 0);
    --item-MinHeight:               var(--og-list-item-MinHeight, 3em);
    
    --item-Opacity:                var(--og-list-item-Opacity, 1);
    --item-Opacity--disabled:      var(--og-list-item-Opacity--disabled, .5);

    box-sizing: border-box;
    *, *::before, *::after { box-sizing: inherit; }
}

:host([disabled]) {
    --og-list-Opacity: var(--og-list-Opacity--disabled);
    .og-list-item__content {
        cursor: default;
    }
}

.og-list-item {
    display: block;
    outline: 0;
}

.og-list-item__content {
    display: flex;
    background: var(--item-Background);
    color: var(--item-Color);
    border: var(--item-BorderWidth) var(--item-BorderStyle) var(--item-BorderColor);
    border-radius: var(--item-BorderRadius);
    margin: var(--item-Margin);
    height: var(--item-MinHeight);
    line-height: var(--item-MinHeight);
    padding-left: 1em;
    padding-right: 1em;
    opacity: var(--item-Opacity);

    :host(:not([disabled])) .og-list-item:not(.og-list-item--disabled) &:not(.og-list-item__content--selected):hover {
        --item-Background: var(--item-Background--highlight);
        cursor: pointer;
    }

    :host-context(og-list[disabled]) & {
        pointer-events: none;
    }
}

.og-list-item--disabled {
    --item-Opacity: var(--item-Opacity--disabled);
}

.og-list-item__content--selected {
    --item-Background: var(--item-Background--active);

    :host(:not([disabled])) &:hover {
        --item-Background: var(--item-Background--active);
    }
}

.og-list-item__icon {
    padding-right: 1em;
    width: var(--item-MinHeight);

    img {
        object-fit: contain;
        width: 100%;
        height: 100%;
    }
}

.og-list-item__label {
    flex-grow: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.og-list-item__value {
    line-height: inherit;
    font-weight: bold;
}
