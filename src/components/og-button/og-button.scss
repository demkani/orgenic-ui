// =============================================================================
// CSS CUSTOM PROPERTIES
// =============================================================================

// -----------------------------------------------------------------------------
// Component Wrapper
// -----------------------------------------------------------------------------

:host {

    // BASE
    // ---
    // Variables that are used in different places inside this component.

    /**
     * @prop --og-color-main:
     * Main color. Used for the colored parts of the Button.
     * E.g. used for Background in Solid Buttons,
     * or Text and Overlay in Blank Buttons.
     */
    --og-color-main: var(--OG-COLOR-ONE, #{$og-color-one});

    /**
     * @prop --og-color-main--conter:
     * Conter Color to Main Color to guarantee good contrast.
     * E.g. used for text on Main Color.
     */
    --og-color-main--conter: var(--OG-COLOR-ONE--CONTER, #{$og-color-one--conter});

    /**
     * @prop --og-color-main--boost:
     * Boost Color for Main Color to increase the contrast to text.
     * E.g. used for Overlay on Solid Buttons.
     */
    --og-color-main--boost: var(--OG-COLOR-ONE--BOOST, #{$og-color-one--boost});

    /**
     * @prop --og-color-main--disabled:
     * Color variant for a disabled Button state.
     * E.g. greys out all the colored parts.
     */
    --og-color-main--disabled: var(--OG-COLOR-SHADE--40, #{$og-color-shade--40});


    // PROPERTIES
    // ---
    // Variables that match themable Properties

    /**
     * @prop --og-button-Background:
     * Main background color of the button
     */
    --og-button-Background: transparent;

    /**
     * @prop --og-button-BorderColor:
     * Main border color of the button
     */
    --og-button-BorderColor: transparent;

    /**
     * @prop --og-button-BorderStyle:
     * Main border style of the button
     */
    --og-button-BorderStyle: solid;

    /**
     * @prop --og-button-BorderWidth:
     * Main border Width of the button
     */
    --og-button-BorderWidth: 1px;

    /**
     * @prop --og-button-BorderRadius:
     * Main border radius of the button
     */
    --og-button-BorderRadius: 0.25rem;

    /**
     * @prop --og-button-BoxShadow:
     * Initial BoxShadow of the button
     */
    --og-button-BoxShadow: none;

    /**
     * @prop --og-button-BoxShadow--raised:
     * BoxShadow of the button when it's raised
     */
    --og-button-BoxShadow--raised:
        0 0 0.125rem 0 var(--OG-COLOR-SHADOW, #{$og-color-shadow}),
        0 0.125rem 0.25rem 0 var(--OG-COLOR-SHADOW, #{$og-color-shadow});

    /**
     * @prop --og-button-Color:
     * Text color of the button label
     */
    --og-button-Color: var(--og-color-main);

    /**
     * @prop --og-button-Opacity:
     * Opacity of the Button.
     */
    --og-button-Opacity: 1;

    /**
     * @prop --og-button-Opacity--disabled:
     * Opacity of the button when it's disabled.
     */
    --og-button-Opacity--disabled: 0.32;

    /**
     * @prop --og-button__text-TextTransform:
     * Text variant of the button label
     */
    --og-button__text-TextTransform: uppercase;

    /**
     * @prop --og-button__text-Padding:
     * Inner Space of the button label. Affects button measures.
     */
    --og-button__text-Padding: calc(0.875rem - var(--og-button-BorderWidth)) 1.5rem;

    /**
     * @prop --og-overlay-Background:
     * Overlay Background used for :hover and :active state of the button.
     */
    --og-overlay-Background: var(--OG-COLOR-ONE--BOOST, #{$og-color-one--boost});

    /**
     * @prop --og-overlay-BorderRadius:
     * Overlay Border Radius. In order to obtain the same radius as the button.
     */
    --og-overlay-BorderRadius: var(--og-button-BorderRadius);

    /**
     * @prop --og-overlay-Opacity:
     * Inital Overlay opacity.
     */
    --og-overlay-Opacity: var(--OG-OPACITY--OFF, #{$og-opacity--off});

    /**
     * @prop --og-overlay-Opacity--hover:
     * Overlay opacity on :hover state of the button.
     */
    --og-overlay-Opacity--hover: var(--OG-OPACITY--HOVER, #{$og-opacity--hover});

    /**
     * @prop --og-overlay-Opacity--active:
     * Overlay opacity on :active state of the button.
     */
    --og-overlay-Opacity--active: var(--OG-OPACITY--ACTIVE, #{$og-opacity--active});

    box-sizing: border-box;
    display: inline-block;
    user-select: none;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

:host(.is-solid) {
    --og-button-Background: var(--og-color-main);
    --og-button-Color: var(--og-color-main--conter);
}

:host(.is-blank) {
    --og-overlay-Background: var(--og-color-main);
}

:host(.is-round) {
    --og-button-BorderRadius: 10rem; // A large value simply worksâ€¦
}

:host(.is-outlined) {
    --og-button-BorderColor: var(--og-color-main);
    --og-overlay-Background: var(--og-color-main);
}

:host(.is-raised:not(.is-disabled)) {
    --og-button-BoxShadow: var(--og-button-BoxShadow--raised);
}

:host(.is-disabled) {
    --og-color-main: var(--og-color-main--disabled);
    --og-button-Opacity: var(--og-button-Opacity--disabled);
    pointer-events: none;
}

// Native <button> element
.og-button {
    background: var(--og-button-Background);
    border-color: var(--og-button-BorderColor);
    border-style: var(--og-button-BorderStyle);
    border-width: var(--og-button-BorderWidth);
    border-radius: var(--og-button-BorderRadius);
    box-shadow: var(--og-button-BoxShadow);
    color: var(--og-button-Color);
    cursor: pointer;
    display: block;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    height: 100%;
    line-height: 1;
    margin: 0;
    max-height: inherit;
    max-width: inherit;
    outline: none;
    opacity: var(--og-button-Opacity);
    padding: 0;
    position: relative;
    width: 100%;

    &::after {
        background: var(--og-overlay-Background);
        border-radius: var(--og-overlay-BorderRadius);
        content: "";
        opacity: var(--og-overlay-Opacity);
        pointer-events: none;
        transition-property: opacity;
        transition-duration: 150ms;
        transition-timing-function: ease-in-out;
        z-index: 1;

        position: absolute;
        top: calc(var(--og-button-BorderWidth) * -1);
        left: calc(var(--og-button-BorderWidth) * -1);
        right: calc(var(--og-button-BorderWidth) * -1);
        bottom: calc(var(--og-button-BorderWidth) * -1);
    }

    // 'Hover' state
    &:hover {
        --og-overlay-Opacity: var(--og-overlay-Opacity--hover);
    }

    // 'Active' state
    &:active {
        --og-overlay-Opacity: var(--og-overlay-Opacity--active);
    }

}

// Button Label
.og-button__text {
    padding: var(--og-button__text-Padding);
    position: relative;
    text-transform: var(--og-button__text-TextTransform);
    z-index: 2;
}
